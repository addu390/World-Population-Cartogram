{"mappings":"AAAA,IAAIA,EAAUC,KAAKC,GAAK,EACpBC,EAAS,CAAC,EAAGH,EAAS,EAAIA,EAAS,EAAIA,EAAS,EAAIA,EAAS,EAAIA,GAErE,SAASI,EAAOC,GACd,OAAOA,EAAE,GAGX,SAASC,EAAOD,GACd,OAAOA,EAAE,GAGI,SAAAE,IACb,IAMIC,EACAC,EACAC,EARAC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAIX,EACJY,EAAIV,EAKR,SAASW,EAAOC,GACd,IAA8BC,EAA1BC,EAAW,GAAIC,EAAO,GAAOC,EAAIJ,EAAOK,OAE5C,IAAKJ,EAAI,EAAGA,EAAIG,IAAKH,EACnB,IAAIK,MAAMC,GAAMV,EAAEW,KAAK,KAAMC,EAAQT,EAAOC,GAAIA,EAAGD,MAC5CM,MAAMI,GAAMZ,EAAEU,KAAK,KAAMC,EAAOR,EAAGD,IAD1C,CAGA,IAAIS,EACAF,EACAG,EACAC,EAAK5B,KAAK6B,MAAMF,GAAUlB,GAC1BqB,EAAK9B,KAAK6B,MAAML,EAAKA,EAAKhB,GAAW,EAALoB,GAAU,GAC1CG,EAAMJ,EAAKC,EAEf,GAAoB,EAAhB5B,KAAKgC,IAAID,GAAW,EAAG,CACzB,IAAIE,EAAMT,EAAKM,EACXI,EAAMJ,GAAMN,EAAKM,GAAK,EAAK,GAAK,EAChCK,EAAMP,GAAMD,EAAKC,GAAK,EAAK,GAC3BQ,EAAMZ,EAAKU,EACXG,EAAMV,EAAKQ,EACXF,EAAMA,EAAMF,EAAMA,EAAMK,EAAMA,EAAMC,EAAMA,IAAKP,EAAKI,GAAY,EAALN,EAAS,GAAI,GAAM,EAAGA,EAAKO,GAG5F,IAAIG,EAAKR,EAAK,IAAMF,EAAIW,EAAMpB,EAASmB,GACnCC,EAAKA,EAAIC,KAAKd,IAEhBN,EAAKoB,KAAKD,EAAMpB,EAASmB,GAAM,CAACZ,IAChCa,EAAIE,GAAKX,GAAW,EAALF,GAAU,GAAKpB,EAC9B+B,EAAIG,EAAId,EAAKnB,GAIjB,OAAOW,EAGT,SAASuB,EAAQC,GACf,IAAIC,EAAK,EAAGC,EAAK,EACjB,OAAO5C,EAAO6C,KAAI,SAASC,GACzB,IAAIC,EAAKjD,KAAKkD,IAAIF,GAASJ,EACvBO,GAAMnD,KAAKoD,IAAIJ,GAASJ,EACxBS,EAAKJ,EAAKJ,EACVS,EAAKH,EAAKL,EAEd,OADAD,EAAKI,EAAIH,EAAKK,EACP,CAACE,EAAIC,MA6ChB,OAzCAtC,EAAO2B,QAAU,SAASC,GACxB,MAAO,IAAMD,EAAkB,MAAVC,EAAiBrC,GAAKqC,GAAQW,KAAK,KAAO,KAGjEvC,EAAOwC,QAAU,WAIf,IAHA,IAAIA,EAAU,GACVC,EAAIzD,KAAK6B,MAAMlB,EAAKF,GACpBS,EAAIlB,KAAK6B,MAAMnB,EAAKF,GACfkC,EAAIe,EAAIhD,EAAIiC,EAAI7B,EAAKN,EAAGmC,GAAKjC,IAAMgD,EAC1C,IAAK,IAAIhB,EAAIvB,EAAIV,GAAU,EAAJiD,GAASjD,EAAK,EAAGiC,EAAI7B,EAAKJ,EAAK,EAAGiC,GAAKjC,EAC5DgD,EAAQhB,KAAK,CAACC,EAAGC,IAGrB,OAAOc,GAGTxC,EAAO0C,KAAO,WACZ,IAAIC,EAAWhB,EAAQpC,GAAGqD,MAAM,EAAG,GAAGL,KAAK,KAC3C,OAAOvC,EAAOwC,UAAUT,KAAI,SAASc,GAAK,MAAO,IAAMA,EAAI,IAAMF,KAAaJ,KAAK,KAGrFvC,EAAOyB,EAAI,SAASqB,GAClB,OAAOC,UAAUzC,QAAUR,EAAIgD,EAAG9C,GAAUF,GAG9CE,EAAO0B,EAAI,SAASoB,GAClB,OAAOC,UAAUzC,QAAUP,EAAI+C,EAAG9C,GAAUD,GAG9CC,EAAO4B,OAAS,SAASkB,GACvB,OAAOC,UAAUzC,QAAkBd,EAAS,GAAjBD,GAAKuD,GAAgB9D,KAAKkD,IAAInD,GAAUU,EAAS,IAAJF,EAASS,GAAUT,GAG7FS,EAAOgD,KAAO,SAASF,GACrB,OAAOC,UAAUzC,QAAUZ,EAAKC,EAAK,EAAGC,GAAMkD,EAAE,GAAIjD,GAAMiD,EAAE,GAAI9C,GAAU,CAACJ,EAAKF,EAAIG,EAAKF,IAG3FK,EAAOiD,OAAS,SAASH,GACvB,OAAOC,UAAUzC,QAAUZ,GAAMoD,EAAE,GAAG,GAAInD,GAAMmD,EAAE,GAAG,GAAIlD,GAAMkD,EAAE,GAAG,GAAIjD,GAAMiD,EAAE,GAAG,GAAI9C,GAAU,CAAC,CAACN,EAAIC,GAAK,CAACC,EAAIC,KAG5GG,EAAO4B,OAAO,GC5GvB,IAAIsB,EAAoBC,SAASC,cAAc,eAO/C,SAASC,IACP,IAAIC,EAAYJ,EAAkBK,MAClC,MAAMC,EAAUC,GAAGC,KACjB,uGAEFC,QAAQC,IAAI,CAACJ,IAAUK,MAAKC,IAC1B,IAAKC,GAAWD,GAMpB,SAAkBE,EAAKV,GAErB,MAAMW,EAAS,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrDC,EAAQ,KAAOL,EAAOI,KAAOJ,EAAOE,MACpCI,EAAS,IAAMN,EAAOC,IAAMD,EAAOG,OAErC,IAAII,EAA0B,IAAZlB,EACdmB,EAAOH,EAAQE,EAEfE,EAAiBjB,GAAGkB,mBAAmBC,UAAU,CAAC,CAAC,EAAY,IAATL,GAAgB,CAACD,EAAgB,IAATC,IAAiBP,GAE/Fa,EAAO7F,KAAK8F,KAAKP,EAASC,GAE1BO,EAAYtB,GAAGuB,MAAMH,EAAOJ,GAAM1C,KAAI,SAAUkD,EAAI/E,GACtD,MAAO,CACLuB,EAAGzC,KAAKkG,MAAMhF,EAAIuE,GAAQD,EAC1B9C,EAAG1C,KAAKkG,MAAMhF,EAAIuE,GAAQD,EAC1BW,UAAW,MAIXC,EAAW,GAEf,IAAK,IAAIC,EAAI,EAAGA,EAAIrB,EAAIoB,SAAS9E,OAAQ+E,IAEvC,GADAD,EAASC,GAAK,GACuB,gBAAjCrB,EAAIoB,SAASC,GAAGC,SAASC,KAC3B,IAAK,IAAI9C,EAAI,EAAGA,EAAIuB,EAAIoB,SAASC,GAAGC,SAASE,YAAYlF,OAAQmC,IAC/D2C,EAASC,GAAKD,EAASC,GAAGI,OAAOzB,EAAIoB,SAASC,GAAGC,SAASE,YAAY/C,GAAG,QAInC,WAAjCuB,EAAIoB,SAASC,GAAGC,SAASC,OAChCH,EAASC,GAAKD,EAASC,GAAGI,OAAOzB,EAAIoB,SAASC,GAAGC,SAASE,YAAY,KAI1E/B,GAAGiC,OAAO,cAAcC,UAAU,KAAKC,SAEvC,MAAMC,EAAMpC,GAAGiC,OAAO,cACnBI,OAAO,OACPC,KAAK,QAASzB,EAAQL,EAAOI,KAAOJ,EAAOC,KAC3C6B,KAAK,SAAUxB,EAASN,EAAOC,IAAMD,EAAOG,QAC5C0B,OAAO,KACPC,KAAK,YAAa,aAAa9B,EAAOI,QAAQJ,EAAOC,QAExD,IAAK,IAAI8B,EAAI,EAAGA,EAAIZ,EAAS9E,OAAQ0F,IAAK,CACxC,IAAIC,EAAgBb,EAASY,GAAGjE,KAAIkD,GAAMP,EAAeO,KAErDiB,EAAWnB,EAAUoB,QAAO,SAAUC,EAAKnB,GAE7C,OADIxB,GAAG4C,gBAAgBJ,EAAe,CAAChB,EAAGxD,EAAGwD,EAAGvD,KAAK0E,EAAI5E,KAAKyD,GACvDmB,IACN,IAECE,EAAahH,IACdsC,OAAO0B,GACP7B,GAAE,SAAUrC,GAAK,OAAOA,EAAEqC,KAC1BC,GAAE,SAAUtC,GAAK,OAAOA,EAAEsC,KAEzB6E,EAAYD,EAAWJ,GAE3BL,EAAIC,OAAO,KAAKC,KAAK,KAAM,SACxBJ,UAAU,QACVa,KAAKD,GACLE,QAAQX,OAAO,QACfC,KAAK,QAAS,OACdA,KAAK,aAAa,SAAU3G,GAAK,MAAO,aAAeA,EAAEqC,EAAI,KAAOrC,EAAEsC,EAAI,OAC1EqE,KAAK,IAAKO,EAAW3E,WACrB+E,MAAM,OAAQ,IAAM1H,KAAKkG,MAAsB,SAAhBlG,KAAK2H,UAAqBC,SAAS,KAClEF,MAAM,SAAU,QAChBA,MAAM,eAAgB,IAzEzBG,CAAS9C,EAAST,MAbtBJ,EAAkB4D,iBAAiB,SAAS,KAC1CC,QAAQC,IAAI9D,EAAkBK,OAC9BF,OA0FFA","sources":["node_modules/d3-hexbin/src/hexbin.js","app.js"],"sourcesContent":["var thirdPi = Math.PI / 3,\n    angles = [0, thirdPi, 2 * thirdPi, 3 * thirdPi, 4 * thirdPi, 5 * thirdPi];\n\nfunction pointX(d) {\n  return d[0];\n}\n\nfunction pointY(d) {\n  return d[1];\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 1,\n      y1 = 1,\n      x = pointX,\n      y = pointY,\n      r,\n      dx,\n      dy;\n\n  function hexbin(points) {\n    var binsById = {}, bins = [], i, n = points.length;\n\n    for (i = 0; i < n; ++i) {\n      if (isNaN(px = +x.call(null, point = points[i], i, points))\n          || isNaN(py = +y.call(null, point, i, points))) continue;\n\n      var point,\n          px,\n          py,\n          pj = Math.round(py = py / dy),\n          pi = Math.round(px = px / dx - (pj & 1) / 2),\n          py1 = py - pj;\n\n      if (Math.abs(py1) * 3 > 1) {\n        var px1 = px - pi,\n            pi2 = pi + (px < pi ? -1 : 1) / 2,\n            pj2 = pj + (py < pj ? -1 : 1),\n            px2 = px - pi2,\n            py2 = py - pj2;\n        if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2;\n      }\n\n      var id = pi + \"-\" + pj, bin = binsById[id];\n      if (bin) bin.push(point);\n      else {\n        bins.push(bin = binsById[id] = [point]);\n        bin.x = (pi + (pj & 1) / 2) * dx;\n        bin.y = pj * dy;\n      }\n    }\n\n    return bins;\n  }\n\n  function hexagon(radius) {\n    var x0 = 0, y0 = 0;\n    return angles.map(function(angle) {\n      var x1 = Math.sin(angle) * radius,\n          y1 = -Math.cos(angle) * radius,\n          dx = x1 - x0,\n          dy = y1 - y0;\n      x0 = x1, y0 = y1;\n      return [dx, dy];\n    });\n  }\n\n  hexbin.hexagon = function(radius) {\n    return \"m\" + hexagon(radius == null ? r : +radius).join(\"l\") + \"z\";\n  };\n\n  hexbin.centers = function() {\n    var centers = [],\n        j = Math.round(y0 / dy),\n        i = Math.round(x0 / dx);\n    for (var y = j * dy; y < y1 + r; y += dy, ++j) {\n      for (var x = i * dx + (j & 1) * dx / 2; x < x1 + dx / 2; x += dx) {\n        centers.push([x, y]);\n      }\n    }\n    return centers;\n  };\n\n  hexbin.mesh = function() {\n    var fragment = hexagon(r).slice(0, 4).join(\"l\");\n    return hexbin.centers().map(function(p) { return \"M\" + p + \"m\" + fragment; }).join(\"\");\n  };\n\n  hexbin.x = function(_) {\n    return arguments.length ? (x = _, hexbin) : x;\n  };\n\n  hexbin.y = function(_) {\n    return arguments.length ? (y = _, hexbin) : y;\n  };\n\n  hexbin.radius = function(_) {\n    return arguments.length ? (r = +_, dx = r * 2 * Math.sin(thirdPi), dy = r * 1.5, hexbin) : r;\n  };\n\n  hexbin.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], hexbin) : [x1 - x0, y1 - y0];\n  };\n\n  hexbin.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], hexbin) : [[x0, y0], [x1, y1]];\n  };\n\n  return hexbin.radius(1);\n}\n","import { hexbin } from 'd3-hexbin'\n\nlet errorInputElement = document.querySelector('input#error');\n\nerrorInputElement.addEventListener('click', () => {\n  console.log(errorInputElement.value)\n  start()\n});\n\nfunction start() {\n  let hexRadius = errorInputElement.value\n  const geoData = d3.json(\n    'https://raw.githubusercontent.com/addu390/population-cartogram/master/data/population/2018/geo.json'\n  );\n  Promise.all([geoData]).then(res => {\n    let [geoData] = res;\n\n    plot_map(geoData, hexRadius);\n  });\n}\n\nfunction plot_map(geo, hexRadius) {\n\n  const margin = { top: 30, right: 30, bottom: 30, left: 30 },\n    width = 1200 - margin.left - margin.right,\n    height = 650 - margin.top - margin.bottom;\n\n  let hexDistance = hexRadius * 1.5\n  let cols = width / hexDistance\n\n  let new_projection = d3.geoNaturalEarth1().fitExtent([[0, height * 0.05], [width, height * 0.95]], geo)\n\n  let rows = Math.ceil(height / hexDistance);\n\n  let pointGrid = d3.range(rows * cols).map(function (el, i) {\n    return {\n      x: Math.floor(i % cols) * hexDistance,\n      y: Math.floor(i / cols) * hexDistance,\n      datapoint: 0\n    };\n  });\n\n  let features = []\n\n  for (let i = 0; i < geo.features.length; i++) {\n    features[i] = []\n    if (geo.features[i].geometry.type == \"MultiPolygon\") {\n      for (let j = 0; j < geo.features[i].geometry.coordinates.length; j++) {\n        features[i] = features[i].concat(geo.features[i].geometry.coordinates[j][0])\n      }\n    }\n\n    else if (geo.features[i].geometry.type == \"Polygon\") {\n      features[i] = features[i].concat(geo.features[i].geometry.coordinates[0])\n    }\n  }\n\n  d3.select('#container').selectAll(\"*\").remove()\n\n  const svg = d3.select('#container')\n    .append('svg')\n    .attr('width', width + margin.left + margin.top)\n    .attr('height', height + margin.top + margin.bottom)\n    .append('g')\n    .attr('transform', `translate(${margin.left} ${margin.top})`);\n\n  for (let i = 0; i < features.length; i++) {\n    let polygonPoints = features[i].map(el => new_projection(el));\n\n    let usPoints = pointGrid.reduce(function (arr, el) {\n      if (d3.polygonContains(polygonPoints, [el.x, el.y])) arr.push(el);\n      return arr;\n    }, [])\n\n    let new_hexbin = hexbin()\n      .radius(hexRadius)\n      .x(function (d) { return d.x; })\n      .y(function (d) { return d.y; })\n\n    let hexPoints = new_hexbin(usPoints)\n\n    svg.append('g').attr('id', 'hexes')\n      .selectAll('.hex')\n      .data(hexPoints)\n      .enter().append('path')\n      .attr('class', 'hex')\n      .attr('transform', function (d) { return 'translate(' + d.x + ', ' + d.y + ')'; })\n      .attr('d', new_hexbin.hexagon())\n      .style('fill', '#' + Math.floor(Math.random() * 16777215).toString(16))\n      .style('stroke', '#000')\n      .style('stroke-width', 1);\n  }\n\n\n}\n\nstart()"],"names":["$28bd4c13f05a9ff5$var$thirdPi","Math","PI","$28bd4c13f05a9ff5$var$angles","$28bd4c13f05a9ff5$var$pointX","d","$28bd4c13f05a9ff5$var$pointY","$28bd4c13f05a9ff5$export$2e2bcd8739ae039","r","dx1","dy1","x01","y01","x11","y11","x2","y2","hexbin","points","i","binsById","bins","n","length","isNaN","px","call","point","py","pj","round","pi","py1","abs","px1","pi2","pj2","px2","py2","id","bin","push","x","y","hexagon","radius","x0","y0","map","angle","x1","sin","y1","cos","dx","dy","join","centers","j","mesh","fragment","slice","p","_","arguments","size","extent","$6b17f08f738443dc$var$errorInputElement","document","querySelector","$6b17f08f738443dc$var$start","hexRadius","value","geoData1","d3","json","Promise","all","then","res","geoData","geo","margin","top","right","bottom","left","width","height","hexDistance","cols","new_projection","geoNaturalEarth1","fitExtent","rows","ceil","pointGrid","range","el","floor","datapoint","features","i2","geometry","type","coordinates","concat","select","selectAll","remove","svg","append","attr","i1","polygonPoints","usPoints","reduce","arr","polygonContains","new_hexbin","hexPoints","data","enter","style","random","toString","$6b17f08f738443dc$var$plot_map","addEventListener","console","log"],"version":3,"file":"index.53ac8ba6.js.map"}